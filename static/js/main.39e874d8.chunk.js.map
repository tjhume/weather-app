{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","style","textAlign","color","marginBottom","Form","props","onSubmit","getWeather","className","type","name","placeholder","Weather","city","country","temperature","humidity","description","textTransform","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","message","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","protocol","href","substring","length","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39e874d8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n\t<div style = {{textAlign: 'center', color: 'white', marginBottom: '40px'}}>\r\n\t\t<h1>Weather Tool</h1>\r\n\t\t<p>Enter a city and country</p>\r\n\t</div>\r\n)\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n\t<form onSubmit={props.getWeather}>\r\n\t\t<input className = \"input\" type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n\t\t<input className = \"input\" type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n\t\t<button>Get Weather</button>\r\n\t</form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (//You need the \"class\" keyword to use the \"this\" keyword. By using const, nnecessary funcionality from a stateless component is removed. Props must be provided as an argument now. Furthermore, the return keyword is no longer necessary, nor are the curly braces, nor the parentheses around props!\r\n\t<div className = \"results\">\r\n\t\t{props.city && props.country && <p><span className = \"category\">Location:</span> {props.city}, {props.country}</p>}\r\n\t\t{props.temperature && <p><span className = \"category\">Temperature:</span> {props.temperature} &#xb0;F</p>}\r\n\t\t{props.humidity && <p><span className = \"category\">Humidity:</span> {props.humidity}%</p>}\r\n\t\t{props.description && <p style = {{ textTransform: \"capitalize\" }}><span className = \"category\">Conditions:</span> {props.description}</p>}\r\n\t\t{props.error && <p className = \"error\"><span>Error:</span> {props.error}</p>}\r\n\t</div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"f0a7d84ee9ed89febe9fb1001b307b1c\";\n\nclass App extends React.Component {\n\tstate = {\n\t\ttemperature: undefined,\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\thumidity: undefined,\n\t\tdescription: undefined,\n\t\terror: undefined\n\t}\n\t\n\tgetWeather = async (e) => {\n\t\te.preventDefault();\n\t\tconst city = e.target.elements.city.value;\n\t\tconst country = e.target.elements.country.value;\n\t\tif (city && country) {\n\t\t\tconst api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n\t\t\tconst data = await api_call.json();\n\t\t\t\n\t\t\tif (data.message !== \"city not found\"){\n\t\t\t\tthis.setState({\n\t\t\t\t\ttemperature: data.main.temp,\n\t\t\t\t\tcity: data.name,\n\t\t\t\t\tcountry: data.sys.country,\n\t\t\t\t\thumidity: data.main.humidity,\n\t\t\t\t\tdescription: data.weather[0].description,\n\t\t\t\t\terror: \"\"\n\t\t\t\t});\n\t\t\t}\n\t\t\t//Error handling for incorrect city input\n\t\t\telse{\n\t\t\t\tthis.setState({\n\t\t\t\t\ttemperature: undefined,\n\t\t\t\t\tcity: undefined,\n\t\t\t\t\tcountry: undefined,\n\t\t\t\t\thumidity: undefined,\n\t\t\t\t\tdescription: undefined,\n\t\t\t\t\terror: \"Please enter a correct city.\"\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t//Error handling for missing input\n\t\telse{\n\t\t\tthis.setState({\n\t\t\t\ttemperature: undefined,\n\t\t\t\tcity: undefined,\n\t\t\t\tcountry: undefined,\n\t\t\t\thumidity: undefined,\n\t\t\t\tdescription: undefined,\n\t\t\t\terror: \"Please enter both values.\"\n\t\t\t});\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className = \"cell\">\n\t\t\t<div className = \"content\">\n\t\t\t\t<Titles />\n\t\t\t\t<Form getWeather={this.getWeather}/>\n\t\t\t\t<Weather \n\t\t\t\t\ttemperature={this.state.temperature}\n\t\t\t\t\tcity={this.state.city}\n\t\t\t\t\tcountry={this.state.country}\n\t\t\t\t\thumidity={this.state.humidity}\n\t\t\t\t\tdescription={this.state.description}\n\t\t\t\t\terror={this.state.error}\n\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './custom.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nif (window.location.protocol !== 'https:') {\n  window.location = 'https:' + window.location.href.substring(window.location.protocol.length)\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}